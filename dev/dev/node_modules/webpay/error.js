var util = require('util');

var dataTypes = require('./data_types');

var ApiError = function ApiError(message) {
  this.message = message;
  Error.captureStackTrace(this,  this.constructor);
  this.name = this.constructor.name;
};
util.inherits(ApiError, Error);
module.exports.ApiError = ApiError;

var InvalidRequestError = function InvalidRequestError(message, badValue) {
  this.message = message;
  Error.captureStackTrace(this,  this.constructor);
  this.name = this.constructor.name;

  this.badValue = badValue;
};
util.inherits(InvalidRequestError, ApiError);
InvalidRequestError.prototype.badValue = null;
module.exports.InvalidRequestError = InvalidRequestError;

var InvalidResponseError = function InvalidResponseError(message, badValue) {
  this.message = message;
  Error.captureStackTrace(this,  this.constructor);
  this.name = this.constructor.name;

  this.badValue = badValue;
};
util.inherits(InvalidResponseError, ApiError);
InvalidResponseError.prototype.badValue = null;
module.exports.InvalidResponseError = InvalidResponseError;

var ApiConnectionError = function ApiConnectionError(message, cause) {
  this.message = message;
  Error.captureStackTrace(this,  this.constructor);
  this.name = this.constructor.name;

  this.cause = cause;
};
util.inherits(ApiConnectionError, ApiError);
ApiConnectionError.prototype.cause = null;
module.exports.ApiConnectionError = ApiConnectionError;

module.exports.errorResponse = {};

// Placeholder. ErrorResponseError is abstract class.
var ErrorResponseError = function ErrorResponseError() {};
util.inherits(ErrorResponseError, ApiError);
ErrorResponseError.prototype.status = null;
ErrorResponseError.prototype.data = null;
module.exports.errorResponse.ErrorResponseError = ErrorResponseError;

(function (rootApiError, errorResponse) {
  var InvalidRequestError = function InvalidRequestError(status, data) {
    this.message = util.format('%s: %s', 'InvalidRequestError', data.error.message);
    Error.captureStackTrace(this,  this.constructor);
    this.name = this.constructor.name;

    this.status = status;
    this.data = new dataTypes.ErrorData(data);
  };
  util.inherits(InvalidRequestError, rootApiError);
  errorResponse.InvalidRequestError = InvalidRequestError;

  var AuthenticationError = function AuthenticationError(status, data) {
    this.message = util.format('%s: %s', 'AuthenticationError', data.error.message);
    Error.captureStackTrace(this,  this.constructor);
    this.name = this.constructor.name;

    this.status = status;
    this.data = new dataTypes.ErrorData(data);
  };
  util.inherits(AuthenticationError, rootApiError);
  errorResponse.AuthenticationError = AuthenticationError;

  var CardError = function CardError(status, data) {
    this.message = util.format('%s: %s', 'CardError', data.error.message);
    Error.captureStackTrace(this,  this.constructor);
    this.name = this.constructor.name;

    this.status = status;
    this.data = new dataTypes.ErrorData(data);
  };
  util.inherits(CardError, rootApiError);
  errorResponse.CardError = CardError;

  var ApiError = function ApiError(status, data) {
    this.message = util.format('%s: %s', 'ApiError', data.error.message);
    Error.captureStackTrace(this,  this.constructor);
    this.name = this.constructor.name;

    this.status = status;
    this.data = new dataTypes.ErrorData(data);
  };
  util.inherits(ApiError, rootApiError);
  errorResponse.ApiError = ApiError;

})(ErrorResponseError, module.exports.errorResponse);

module.exports.invalidJson = function(error, callback) {
  var err = new ApiConnectionError('Server responded invalid JSON string', error);
  callback(err, null);
};

module.exports.inRequest = function(error, callback) {
  var err = new ApiConnectionError('API request failed with ' + error.toString(), error);
  callback(err, null);
};

module.exports.noConversionError = function(convertTo, badValue) {
  return new InvalidRequestError(convertTo + ' does not accept the given value', badValue);
};
